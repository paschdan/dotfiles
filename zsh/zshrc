emulate zsh

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
	  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


typeset -gaU cdpath fpath mailpath path
path=($HOME/bin $HOME/.local/bin $HOME/.config/composer/vendor/bin $path)

function jit() {
	emulate -L zsh
	[[ ${(%):-%#} == '#' || $1.zwc -nt $1 || ! -w ${1:h} ]] || zcompile $1
}

function jit-source() {
	emulate -L zsh
	[[ -e $1 ]] || return
	jit $1
	source $1
}

jit ~/.zshrc

### VI MODE

# Updates editor information when the keymap changes.
function zle-keymap-select() {
  # update keymap variable for the prompt
  VI_KEYMAP=$KEYMAP

  zle reset-prompt
  zle -R
}

zle -N zle-keymap-select

bindkey -v

# allow v to edit the command line (standard behaviour)
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'v' edit-command-line

# allow ctrl-p, ctrl-n for navigate history (standard behaviour)
bindkey '^P' up-history
bindkey '^N' down-history

# allow ctrl-h, ctrl-w, ctrl-? for char and word deletion (standard behaviour)
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word

# if mode indicator wasn't setup by theme, define default
if [[ "$MODE_INDICATOR" == "" ]]; then
  MODE_INDICATOR="%{$fg_bold[red]%}<%{$fg[red]%}<<%{$reset_color%}"
fi

function vi_mode_prompt_info() {
  echo "${${VI_KEYMAP/vicmd/$MODE_INDICATOR}/(main|viins)/}"
}

# define right prompt, if it wasn't defined by a theme
if [[ "$RPS1" == "" && "$RPROMPT" == "" ]]; then
  RPS1='$(vi_mode_prompt_info)'
fi

### END VI MODE

#completions
fpath=(~/dotfiles/zsh/completions $fpath)

autoload -Uz compinit && compinit

#history settings

jit-source ~/dotfiles/zsh/history.zsh

#aliases
jit-source ~/dotfiles/zsh/aliases/docker.zsh
jit-source ~/dotfiles/zsh/aliases/git.zsh
jit-source ~/dotfiles/zsh/aliases/event-ticketing.zsh

# fzf
path+=~/dotfiles/zsh/fzf/bin
FZF_COMPLETION_TRIGGER=
export FZF_DEFAULT_COMMAND='rg --files --hidden'

# bindings

# Shows '...' while completing. No `emulate -L zsh` to pick up dotglob if it's set.
if (( ${+terminfo[rmam]} && ${+terminfo[smam]} )); then
  function expand-or-complete-with-dots() {
    echo -nE - ${terminfo[rmam]}${(%):-"%F{red}......%f"}${terminfo[smam]}
    zle expand-or-complete
    zle redisplay
  }
else
  function expand-or-complete-with-dots() {
    zle expand-or-complete
  }
fi

# Similar to fzf-history-widget. Extras:
#
#   - `awk` to remove duplicate
#   - preview pane with syntax highlighting
function fzf-history-widget-unique() {
  local selected
  setopt localoptions noglobsubst noposixbuiltins pipefail 2> /dev/null
  local preview='echo -E {} | cut -c8- | xargs -0 echo -e | bat -l bash --color always -pp'
  selected="$(
    fc -rl 1 |
    awk '!_[substr($0, 8)]++' |
    $(__fzfcmd) +m -n2..,.. --tiebreak=index --height=80% --preview-window=down:50% \
      --query=$LBUFFER --preview=$preview )"
  local ret=$?
  [[ -n "$selected" ]] && zle vi-fetch-history -n $selected
  zle .reset-prompt
  return $ret
}

zle -N expand-or-complete-with-dots
zle -N fzf-history-widget-unique

fzf_default_completion=expand-or-complete-with-dots

function bindkey() {}
jit-source ~/dotfiles/zsh/fzf/shell/completion.zsh
jit-source ~/dotfiles/zsh/fzf/shell/key-bindings.zsh
unfunction bindkey

bindkey '\t'      expand-or-complete-with-dots        # tab        completion with '...'
bindkey '\e[1;3B' fzf-cd-widget                       # alt+down   fzf cd
bindkey '^T'      fzf-completion                      # ctrl+t     fzf completion
bindkey '^R'      fzf-history-widget-unique           # ctrl+r     fzf history

# alias tips
jit-source ~/dotfiles/zsh/zsh-fast-alias-tips/fast-alias-tips.plugin.zsh

# Theme
jit-source ~/.p10k.zsh
jit-source ~/dotfiles/zsh/powerlevel10k/powerlevel10k.zsh-theme

# highlight
jit-source ~/dotfiles/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh

#Substring Search
jit-source ~/dotfiles/zsh/zsh-history-substring-search/zsh-history-substring-search.zsh

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

function phpco() { docker run --init -v $PWD:/mnt/src:cached --rm -u "$(id -u):$(id -g)" frbit/phpco:latest $@; return $?; }

# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
