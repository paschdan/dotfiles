emulate zsh

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
	  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


typeset -gaU cdpath fpath mailpath path
path=($HOME/bin $HOME/.local/bin $HOME/.config/composer/vendor/bin $HOME/go/bin $path)

function jit() {
	emulate -L zsh
	[[ ${(%):-%#} == '#' || $1.zwc -nt $1 || ! -w ${1:h} ]] || zcompile $1
}

function jit-source() {
	emulate -L zsh
	[[ -e $1 ]] || return
	jit $1
	source $1
}

jit ~/.zshrc

# zplug
source ~/.zplug/init.zsh

zplug "jeffreytse/zsh-vi-mode"

# Then, source plugins and add commands to $PATH
zplug load

# zvm
#

function zvm_config() {
  ZVM_VI_INSERT_ESCAPE_BINDKEY=jk
}

function zvm_after_lazy_keybindings() {
  zvm_bindkey vicmd '^[t' tmux_left_pane
  zvm_bindkey viins '^[t' tmux_left_pane
}

function zvm_after_init() {
   source ~/dotfiles/zsh/bindkeys.zsh
 }

source ~/.zplug/repos/jeffreytse/zsh-vi-mode/zsh-vi-mode.plugin.zsh

#completions
fpath=(~/dotfiles/zsh/completions $fpath)

autoload -Uz compinit && compinit

#history settings

jit-source ~/dotfiles/zsh/history.zsh

#aliases
jit-source ~/dotfiles/zsh/aliases/docker.zsh
jit-source ~/dotfiles/zsh/aliases/encode64.zsh
jit-source ~/dotfiles/zsh/aliases/git.zsh

# fzf
path+=~/dotfiles/zsh/fzf/bin
FZF_COMPLETION_TRIGGER=
export FZF_DEFAULT_COMMAND='rg --files --hidden'

# bindings

# Shows '...' while completing. No `emulate -L zsh` to pick up dotglob if it's set.
if (( ${+terminfo[rmam]} && ${+terminfo[smam]} )); then
  function expand-or-complete-with-dots() {
    echo -nE - ${terminfo[rmam]}${(%):-"%F{red}......%f"}${terminfo[smam]}
    zle expand-or-complete
    zle redisplay
  }
else
  function expand-or-complete-with-dots() {
    zle expand-or-complete
  }
fi

# Similar to fzf-history-widget. Extras:
#
#   - `awk` to remove duplicate
#   - preview pane with syntax highlighting
function fzf-history-widget-unique() {
  local selected
  setopt localoptions noglobsubst noposixbuiltins pipefail 2> /dev/null
  local preview='echo -E {} | cut -c8- | xargs -0 echo -e | bat -l bash --color always -pp'
  selected="$(
    fc -rl 1 |
    awk '!_[substr($0, 8)]++' |
    $(__fzfcmd) +m -n2..,.. --tiebreak=index --height=80% --preview-window=down:50% \
      --query=$LBUFFER --preview=$preview )"
  local ret=$?
  [[ -n "$selected" ]] && zle vi-fetch-history -n $selected
  zle .reset-prompt
  return $ret
}

zle -N expand-or-complete-with-dots
zle -N fzf-history-widget-unique

fzf_default_completion=expand-or-complete-with-dots

# alias tips
jit-source ~/dotfiles/zsh/zsh-fast-alias-tips/fast-alias-tips.plugin.zsh

# Theme
jit-source ~/.p10k.zsh
jit-source ~/dotfiles/zsh/powerlevel10k/powerlevel10k.zsh-theme

# highlight
jit-source ~/dotfiles/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh

#Substring Search
jit-source ~/dotfiles/zsh/zsh-history-substring-search/zsh-history-substring-search.zsh


function phpco() { docker run --init -v $PWD:/mnt/src:cached --rm -u "$(id -u):$(id -g)" frbit/phpco:latest $@; return $?; }

# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fbd - delete git branch (including remote branches)
fbd() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" | fzf --multi ) &&
  git branch -D $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# mkfile creates a file with paths
mkfile() { 
    mkdir -p $( dirname "$1") && touch "$1" 
}


# export PATH="/usr/local/opt/helm@2/bin:$PATH"
export XDG_CONFIG_HOME=$HOME/.config

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
source <(kubectl completion zsh)
path+=~/dotfiles/zsh/bin

export PATH="/usr/local/opt/python@3.7/bin:$PATH"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/D073290/private/k8s-security/cloud-shell-setup/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/D073290/private/k8s-security/cloud-shell-setup/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/D073290/private/k8s-security/cloud-shell-setup/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/D073290/private/k8s-security/cloud-shell-setup/google-cloud-sdk/completion.zsh.inc'; fi
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"
export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"
export GPG_TTY=$(tty)
export PATH="/opt/homebrew/opt/curl/bin:$PATH"
#export KUBECONFIG=$(find ~/.kube/clusters -type f | gsed ':a;N;s/\n/:/;ba')
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

alias jira2org="pbpaste | pandoc -f jira -t org | pbcopy; echo 'Conversion done.'"
alias org2jira="pbpaste | pandoc -f org -t jira | pbcopy; echo 'done.'"
alias md2jira="pbpaste | pandoc -f md -t jira |pbcopy; echo 'done.'"


# Load Angular CLI autocompletion.
source <(ng completion script)


function tmux_left_pane() {
      tmux select-pane -L
      tmux resize-pane -Z
      # zle reset-prompt # Refresh the prompt after switching panes
}

zvm_define_widget tmux_left_pane

export JAVA_HOME=/Library/Java/JavaVirtualMachines/sapmachine-21.jdk/Contents/Home
